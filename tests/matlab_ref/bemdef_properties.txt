self.albedo = alb                                       # outer surface albedo
self.emissivity = emis                                  # outer surface emissivity
self.layerThickness = thicknessLst                      # vector of layer thicnesses (m)
self.layerThermalCond = map(lambda z: 0, materialLst)   # vector of layer thermal conductivity (W m-1 K-1)
self.layerVolHeat = map(lambda z: 0, materialLst)       # vector of layer volumetric heat (J m-3 K-1)
self.vegCoverage = vegCoverage                          # surface vegetation coverage
self.layerTemp = [T_init] * len(thicknessLst)           # vector of layer temperatures (K)
self.horizontal = horizontal                            # 1-horizontal, 0-vertical
//
'albedo'
'emissivity'
'layerThickness'
'layerThermalCond'
'layerVolHeat'
'vegCoverage'
'layerTemp'
'horizontal'
//
fprintf(fileIDmass_albedo,'%.16f',refBEM(i,j,k).mass.albedo);
fprintf(fileIDmass_emissivity,'%.16f',refBEM(i,j,k).mass.emissivity);
fprintf(fileIDmass_layerThickness,'%.16f',refBEM(i,j,k).mass.layerThickness);
fprintf(fileIDmass_layerThermalCond,'%.16f',refBEM(i,j,k).mass.layerThermalCond);
fprintf(fileIDmass_layerVolHeat,'%.16f',refBEM(i,j,k).mass.layerVolHeat);
fprintf(fileIDmass_vegCoverage,'%.16f',refBEM(i,j,k).mass.vegCoverage);
fprintf(fileIDmass_layerTemp,'%.16f',refBEM(i,j,k).mass.layerTemp);
fprintf(fileIDmass_horizontal,'%.16f',refBEM(i,j,k).mass.horizontal);
fprintf(fileIDwall_albedo,'%.16f',refBEM(i,j,k).wall.albedo);
fprintf(fileIDwall_emissivity,'%.16f',refBEM(i,j,k).wall.emissivity);
fprintf(fileIDwall_layerThickness,'%.16f',refBEM(i,j,k).wall.layerThickness);
fprintf(fileIDwall_layerThermalCond,'%.16f',refBEM(i,j,k).wall.layerThermalCond);
fprintf(fileIDwall_layerVolHeat,'%.16f',refBEM(i,j,k).wall.layerVolHeat);
fprintf(fileIDwall_vegCoverage,'%.16f',refBEM(i,j,k).wall.vegCoverage);
fprintf(fileIDwall_layerTemp,'%.16f',refBEM(i,j,k).wall.layerTemp);
fprintf(fileIDwall_horizontal,'%.16f',refBEM(i,j,k).wall.horizontal);
fprintf(fileIDroof_albedo,'%.16f',refBEM(i,j,k).roof.albedo);
fprintf(fileIDroof_emissivity,'%.16f',refBEM(i,j,k).roof.emissivity);
fprintf(fileIDroof_layerThickness,'%.16f',refBEM(i,j,k).roof.layerThickness);
fprintf(fileIDroof_layerThermalCond,'%.16f',refBEM(i,j,k).roof.layerThermalCond);
fprintf(fileIDroof_layerVolHeat,'%.16f',refBEM(i,j,k).roof.layerVolHeat);
fprintf(fileIDroof_vegCoverage,'%.16f',refBEM(i,j,k).roof.vegCoverage);
fprintf(fileIDroof_layerTemp,'%.16f',refBEM(i,j,k).roof.layerTemp);
fprintf(fileIDroof_horizontal,'%.16f',refBEM(i,j,k).roof.horizontal);
//
fileIDmass_albedo=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_albedo.txt','w');
fileIDmass_emissivity=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_emissivity.txt','w');
fileIDmass_layerThickness=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_layerThickness.txt','w');
fileIDmass_layerThermalCond=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_layerThermalCond.txt','w');
fileIDmass_layerVolHeat=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_layerVolHeat.txt','w');
fileIDmass_vegCoverage=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_vegCoverage.txt','w');
fileIDmass_layerTemp=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_layerTemp.txt','w');
fileIDmass_horizontal=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_mass_horizontal.txt','w');
fileIDwall_albedo=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_albedo.txt','w');
fileIDwall_emissivity=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_emissivity.txt','w');
fileIDwall_layerThickness=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_layerThickness.txt','w');
fileIDwall_layerThermalCond=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_layerThermalCond.txt','w');
fileIDwall_layerVolHeat=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_layerVolHeat.txt','w');
fileIDwall_vegCoverage=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_vegCoverage.txt','w');
fileIDwall_layerTemp=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_layerTemp.txt','w');
fileIDwall_horizontal=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_wall_horizontal.txt','w');
fileIDroof_albedo=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_albedo.txt','w');
fileIDroof_emissivity=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_emissivity.txt','w');
fileIDroof_layerThickness=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_layerThickness.txt','w');
fileIDroof_layerThermalCond=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_layerThermalCond.txt','w');
fileIDroof_layerVolHeat=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_layerVolHeat.txt','w');
fileIDroof_vegCoverage=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_vegCoverage.txt','w');
fileIDroof_layerTemp=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_layerTemp.txt','w');
fileIDroof_horizontal=fopen('C:/saeran/master/git/UWG_Python/tests/matlab_ref/matlab_readDOE/matlab_ref_bemdef_roof_horizontal.txt','w');
//
fclose(fileIDmass_albedo);
fclose(fileIDmass_emissivity);
fclose(fileIDmass_layerThickness);
fclose(fileIDmass_layerThermalCond);
fclose(fileIDmass_layerVolHeat);
fclose(fileIDmass_vegCoverage);
fclose(fileIDmass_layerTemp);
fclose(fileIDmass_horizontal);
fclose(fileIDwall_albedo);
fclose(fileIDwall_emissivity);
fclose(fileIDwall_layerThickness);
fclose(fileIDwall_layerThermalCond);
fclose(fileIDwall_layerVolHeat);
fclose(fileIDwall_vegCoverage);
fclose(fileIDwall_layerTemp);
fclose(fileIDwall_horizontal);
fclose(fileIDroof_albedo);
fclose(fileIDroof_emissivity);
fclose(fileIDroof_layerThickness);
fclose(fileIDroof_layerThermalCond);
fclose(fileIDroof_layerVolHeat);
fclose(fileIDroof_vegCoverage);
fclose(fileIDroof_layerTemp);
fclose(fileIDroof_horizontal);
//
elif bemid == 'mass_albedo':
	assert refBEM[bldType][bldEra][climateZone].mass.albedo == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_emissivity':
	assert refBEM[bldType][bldEra][climateZone].mass.emissivity == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_layerThickness':
	assert refBEM[bldType][bldEra][climateZone].mass.layerThickness[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_layerThermalCond':
	assert refBEM[bldType][bldEra][climateZone].mass.layerThermalCond[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_layerVolHeat':
	assert refBEM[bldType][bldEra][climateZone].mass.layerVolHeat[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_vegCoverage':
	assert refBEM[bldType][bldEra][climateZone].mass.vegCoverage == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_layerTemp':
	assert refBEM[bldType][bldEra][climateZone].mass.layerTemp[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'mass_horizontal':
	assert refBEM[bldType][bldEra][climateZone].mass.horizontal == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_albedo':
	assert refBEM[bldType][bldEra][climateZone].wall.albedo == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_emissivity':
	assert refBEM[bldType][bldEra][climateZone].wall.emissivity == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_layerThickness':
	assert refBEM[bldType][bldEra][climateZone].wall.layerThickness[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_layerThermalCond':
	assert refBEM[bldType][bldEra][climateZone].wall.layerThermalCond[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_layerVolHeat':
	assert refBEM[bldType][bldEra][climateZone].wall.layerVolHeat[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_vegCoverage':
	assert refBEM[bldType][bldEra][climateZone].wall.vegCoverage == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_layerTemp':
	assert refBEM[bldType][bldEra][climateZone].wall.layerTemp[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'wall_horizontal':
	assert refBEM[bldType][bldEra][climateZone].wall.horizontal == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_albedo':
	assert refBEM[bldType][bldEra][climateZone].roof.albedo == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_emissivity':
	assert refBEM[bldType][bldEra][climateZone].roof.emissivity == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_layerThickness':
	assert refBEM[bldType][bldEra][climateZone].roof.layerThickness[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_layerThermalCond':
	assert refBEM[bldType][bldEra][climateZone].roof.layerThermalCond[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_layerVolHeat':
	assert refBEM[bldType][bldEra][climateZone].roof.layerVolHeat[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_vegCoverage':
	assert refBEM[bldType][bldEra][climateZone].roof.vegCoverage == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_layerTemp':
	assert refBEM[bldType][bldEra][climateZone].roof.layerTemp[0] == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)

elif bemid == 'roof_horizontal':
	assert refBEM[bldType][bldEra][climateZone].roof.horizontal == pytest.approx(matlab_ref_value, abs=1e-15),
		'btype={},era={},czone={}'.format(bldType+1, bldEra+1, climateZone+1)








